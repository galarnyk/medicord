/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.purdue.cs408.testify;

import java.awt.event.FocusEvent;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.text.NumberFormatter;

/*
 * @author sims4
 */
public class InstructorTestify extends javax.swing.JFrame {

    Test test;
    File testFile;
    Question question;
    //ArrayList<Question> qList;
    boolean isNew;
    int current;
    private NumberFormat pointsPossFormat = NumberFormat.getInstance();
    private NumberFormatter pointsPossFormatter = new NumberFormatter(pointsPossFormat);

    /**
     * Creates new form InstructorTestify. Also creates a new Test with one
     * blank question.
     */
    public InstructorTestify(String[] args) {
        listModel = new DefaultListModel<String>();
        pointsPossFormatter.setMinimum(1);
        initComponents();
        initComponentLists();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        current = -1;
        if (args.length > 0 && args[0].equals("open")) {
            openExam();
        } else {
            isNew = true;
            newTest();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        questionPanel = new javax.swing.JPanel();
        fileChooser = new javax.swing.JFileChooser();
        promptLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        promptTextArea = new javax.swing.JTextArea();
        answerLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        answerTextArea = new javax.swing.JTextArea();
        choicesLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        choicesList = new javax.swing.JList(listModel);
        prevQButton = new javax.swing.JButton();
        nextQButton = new javax.swing.JButton();
        addChoiceButton = new javax.swing.JButton();
        ptsPossLabel = new javax.swing.JLabel();
        languageCombo = new javax.swing.JComboBox();
        langLabel = new javax.swing.JLabel();
        deleteChoiceButton = new javax.swing.JButton();
        questionComboBox = new javax.swing.JComboBox();
        typeMarker = new javax.swing.JLabel();
        questionTypeLabel = new javax.swing.JLabel();
        fileLabel = new javax.swing.JLabel();
        fileTextField = new javax.swing.JTextField();
        pointsPossTextField = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();
        testMenu = new javax.swing.JMenu();
        newTestMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        propMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        questionMenu = new javax.swing.JMenu();
        newQMenu = new javax.swing.JMenu();
        newSA = new javax.swing.JMenuItem();
        newMC = new javax.swing.JMenuItem();
        newProg = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();

        javax.swing.GroupLayout questionPanelLayout = new javax.swing.GroupLayout(questionPanel);
        questionPanel.setLayout(questionPanelLayout);
        questionPanelLayout.setHorizontalGroup(
            questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 726, Short.MAX_VALUE)
        );
        questionPanelLayout.setVerticalGroup(
            questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 418, Short.MAX_VALUE)
        );

        fileChooser.setApproveButtonText("Open");
        fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        promptLabel.setText("Prompt");

        promptTextArea.setColumns(20);
        promptTextArea.setRows(5);
        jScrollPane1.setViewportView(promptTextArea);

        answerLabel.setText("Answer");

        answerTextArea.setColumns(20);
        answerTextArea.setRows(5);
        jScrollPane2.setViewportView(answerTextArea);

        choicesLabel.setText("Choices");

        jScrollPane3.setViewportView(choicesList);

        prevQButton.setText("Previous");
        prevQButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                prevQButtonMouseClicked(evt);
            }
        });
        prevQButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevQButtonActionPerformed(evt);
            }
        });

        nextQButton.setText("Next");
        nextQButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextQButtonMouseClicked(evt);
            }
        });
        nextQButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextQButtonActionPerformed(evt);
            }
        });

        addChoiceButton.setText("Add");
        addChoiceButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addChoiceButtonMouseClicked(evt);
            }
        });
        addChoiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addChoiceButtonActionPerformed(evt);
            }
        });

        ptsPossLabel.setText("Points Possible");

        languageCombo.setModel(new DefaultComboBoxModel(Language.values()));
        languageCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                languageComboActionPerformed(evt);
            }
        });

        langLabel.setText("Language");

        deleteChoiceButton.setText("Delete Selected");
        deleteChoiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteChoiceButtonActionPerformed(evt);
            }
        });

        questionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1" }));
        questionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                questionComboBoxActionPerformed(evt);
            }
        });

        typeMarker.setText("Type:");

        fileLabel.setText("File");

        fileTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileTextFieldActionPerformed(evt);
            }
        });

        pointsPossTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointsPossTextFieldActionPerformed(evt);
            }
        });

        testMenu.setMnemonic('t');
        testMenu.setText("Test");

        newTestMenuItem.setMnemonic('n');
        newTestMenuItem.setText("New");
        newTestMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTestMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(newTestMenuItem);

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(saveAsMenuItem);

        propMenuItem.setMnemonic('p');
        propMenuItem.setText("Properties");
        propMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(propMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(exitMenuItem);

        menuBar.add(testMenu);

        questionMenu.setMnemonic('e');
        questionMenu.setText("Question");
        questionMenu.setToolTipText("");

        newQMenu.setText("New");

        newSA.setText("Short Answer");
        newSA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSAActionPerformed(evt);
            }
        });
        newQMenu.add(newSA);

        newMC.setText("Multiple Choice");
        newMC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMCActionPerformed(evt);
            }
        });
        newQMenu.add(newMC);

        newProg.setText("Programming");
        newProg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newProgActionPerformed(evt);
            }
        });
        newQMenu.add(newProg);

        questionMenu.add(newQMenu);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });
        questionMenu.add(deleteMenuItem);

        menuBar.add(questionMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(questionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(typeMarker)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(questionTypeLabel)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addComponent(prevQButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nextQButton))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(promptLabel)
                            .addComponent(answerLabel)
                            .addComponent(choicesLabel)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addChoiceButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteChoiceButton)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(fileTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(ptsPossLabel))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(langLabel)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(languageCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(pointsPossTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                                .addGap(31, 31, 31))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(fileLabel)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(questionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeMarker)
                    .addComponent(questionTypeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(promptLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(answerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(choicesLabel)
                    .addComponent(fileLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fileTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ptsPossLabel)
                            .addComponent(pointsPossTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(languageCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(langLabel)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addChoiceButton)
                            .addComponent(deleteChoiceButton))))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prevQButton)
                    .addComponent(nextQButton))
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void newSAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSAActionPerformed
        if (((ArrayList) test.getQuestions()).size() != 50) {
            Question newQ = new ShortAnswer();
            isNew = true;
            question = newQ;
            test.add(newQ);
            current = test.length();
            resetQuestionComboBox();
            loadQuestion(newQ);
        }
    }//GEN-LAST:event_newSAActionPerformed

    private void nextQButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextQButtonMouseClicked
    }//GEN-LAST:event_nextQButtonMouseClicked

    /**
     * Open a test from a file.
     */
    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        openExam();
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void addChoiceButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addChoiceButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_addChoiceButtonMouseClicked

    private void prevQButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_prevQButtonMouseClicked
    }//GEN-LAST:event_prevQButtonMouseClicked

    private void prevQButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevQButtonActionPerformed
        // TODO add your handling code here:
        saveQuestion();
        if(!(test.length() == 0) && current < test.length()){
        
        isNew = false;
        current++;
        question = test.getQuestion(current - 1);
        questionComboBox.setSelectedIndex(current - 1);
        loadQuestion(question);
        }

    }//GEN-LAST:event_prevQButtonActionPerformed

    private void nextQButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextQButtonActionPerformed
        // TODO add your handling code here:
        saveQuestion();
        if(!(test.length() == 0) && current > 1){
         
        isNew = false;
        current--;
        question = test.getQuestion(current - 1);
        questionComboBox.setSelectedIndex(current - 1);
        loadQuestion(question);
        }
        
       


    }//GEN-LAST:event_nextQButtonActionPerformed

    private void addChoiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addChoiceButtonActionPerformed
        //show dialog box for entering new choice
        //add choice to list and reload
        String newChoice = JOptionPane.showInputDialog(null, "Please enter a new choice", "New Choice", JOptionPane.QUESTION_MESSAGE);
        ((MultipleChoice) question).addChoice(newChoice);
        ((MultipleChoice) question).addChoice(newChoice);
        saveQuestion();
        loadQuestion(question);
    }//GEN-LAST:event_addChoiceButtonActionPerformed

    private void deleteChoiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteChoiceButtonActionPerformed
        // TODO add your handling code here:
        // if a choice is selected, remove it from the list
        saveQuestion();
        int index = choicesList.getSelectedIndex();
        if (index != -1) {
            listModel.removeElementAt(index);
        }
    }//GEN-LAST:event_deleteChoiceButtonActionPerformed

    private void newTestMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTestMenuItemActionPerformed
        // TODO add your handling code here:
        // do appropriate test loading procedures
        // refresh form
        newTest();
    }//GEN-LAST:event_newTestMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        // TODO add your handling code here:
        // open file selection dialog
        saveQuestion();
        if (testFile == null) {
            saveMenuItemActionPerformed(evt);
        } else {
            try {
                test.save(testFile);
            } catch (IOException ex) {
                System.out.println("problem accessing file" + testFile.getAbsolutePath());
            }
        }
        
        // save test to specified file
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:
        // open file selection dialog if file doesnt exist
        // save test to specified file
       saveQuestion();
        int returnVal = fileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            testFile = fileChooser.getSelectedFile();
            try {
                // What to do with the file, e.g. display it in a TextArea
                //textarea.read(new FileReader(file.getAbsolutePath()), null);
                test.save(testFile);
            } catch (IOException ex) {
                System.out.println("problem accessing file" + testFile.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void propMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propMenuItemActionPerformed
        // TODO add your handling code here:
        // display test properties form
        showProperties();
        // save the test properties to the test object

    }//GEN-LAST:event_propMenuItemActionPerformed

    private void showProperties() {
        //Properties p = new Properties(test);
        PropDialog p = new PropDialog(this, true, test);
        p.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        p.setVisible(true);
        
        PropDialog p1 = new PropDialog(this, true, test);
        p1.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        p1.setVisible(true);
        //p.toFront();
    }

    private void newMCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMCActionPerformed
        if (((ArrayList) test.getQuestions()).size() != 50) {
            Question newQ = new MultipleChoice();
            isNew = true;
            question = newQ;
            test.add(newQ);
            current = test.length();
            resetQuestionComboBox();
            loadQuestion(newQ);
        }
    }//GEN-LAST:event_newMCActionPerformed

    private void newProgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newProgActionPerformed
        if (((ArrayList) test.getQuestions()).size() != 50) {
            Question newQ = new Programming();
            isNew = true;
            question = newQ;
            test.add(newQ);
            current = test.length();
            ((Programming) question).setLang(Language.JAVA);
            resetQuestionComboBox();
            loadQuestion(newQ);
        }
    }//GEN-LAST:event_newProgActionPerformed

    private void fileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileChooserActionPerformed

    private void questionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_questionComboBoxActionPerformed
        if (questionComboBox.getSelectedItem() != null && !((String) (questionComboBox.getSelectedItem())).equals("" + current)) {
            saveQuestion();
            isNew = false;
            int qNum = Integer.parseInt((String) questionComboBox.getSelectedItem());
            current = qNum;
            question = test.getQuestion(current - 1);
            loadQuestion(question);

        }
    }//GEN-LAST:event_questionComboBoxActionPerformed

    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed

        test.remove(current - 1);
        if (test.length() > 0) {
            if (current > test.length()) {
                current--;
            }
            question = test.getQuestion(current - 1);
            loadQuestion(question);
        } else {
            newTest();
        }

    }//GEN-LAST:event_deleteMenuItemActionPerformed

    private void languageComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_languageComboActionPerformed

        if (languageCombo.getSelectedIndex() == 0) {
            ((Programming) question).setLang(Language.JAVA);
        } else if (languageCombo.getSelectedIndex() == 1) {
            ((Programming) question).setLang(Language.C);
        } else if (languageCombo.getSelectedIndex() == 2) {
            ((Programming) question).setLang(Language.CPP);
        } else {
            throw new RuntimeException("Bad language selection");
        }
    }//GEN-LAST:event_languageComboActionPerformed

    private void fileTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileTextFieldActionPerformed

    private void pointsPossTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointsPossTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pointsPossTextFieldActionPerformed

    private void resetQuestionComboBox() {

        String[] qNums = new String[test.length()];
        for (int i = 0; i < test.length(); i++) {
            qNums[i] = "" + (i + 1);
        }

        if (test.length() == 0) {
            qNums = new String[1];
            questionComboBox.setModel(new javax.swing.DefaultComboBoxModel(qNums));
            questionComboBox.setEnabled(false);
        } else {
            questionComboBox.setModel(new javax.swing.DefaultComboBoxModel(qNums));
            questionComboBox.setEnabled(true);
            questionComboBox.setSelectedIndex(current - 1);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InstructorTestify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InstructorTestify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InstructorTestify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InstructorTestify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InstructorTestify(args).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addChoiceButton;
    private javax.swing.JLabel answerLabel;
    private javax.swing.JTextArea answerTextArea;
    private javax.swing.JLabel choicesLabel;
    private javax.swing.JList choicesList;
    private javax.swing.JButton deleteChoiceButton;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JTextField fileTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel langLabel;
    private javax.swing.JComboBox languageCombo;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newMC;
    private javax.swing.JMenuItem newProg;
    private javax.swing.JMenu newQMenu;
    private javax.swing.JMenuItem newSA;
    private javax.swing.JMenuItem newTestMenuItem;
    private javax.swing.JButton nextQButton;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JTextField pointsPossTextField;
    private javax.swing.JButton prevQButton;
    private javax.swing.JLabel promptLabel;
    private javax.swing.JTextArea promptTextArea;
    private javax.swing.JMenuItem propMenuItem;
    private javax.swing.JLabel ptsPossLabel;
    private javax.swing.JComboBox questionComboBox;
    private javax.swing.JMenu questionMenu;
    private javax.swing.JPanel questionPanel;
    private javax.swing.JLabel questionTypeLabel;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JMenu testMenu;
    private javax.swing.JLabel typeMarker;
    // End of variables declaration//GEN-END:variables
    private javax.swing.DefaultListModel<String> listModel;
    JComponent[] disableableComponents;
    JComponent[] mcComponents;
    JComponent[] saComponents;
    JComponent[] progComponents;

    /**
     * Load a new question into the current question, populating all fields.
     * <ul>
     * <li>Disable irrelevant fields based on question type</li>
     * <li>Populates all question data fields</li>
     * <li>Populates language type combo box with the available programming
     * languages </li>
     * <li>Populates question combo box with list of questions from current
     * test</li>
     * </ul>
     */
    private void reconstructComboBox() {
        questionComboBox.removeAllItems();
        String s[] = new String[test.length()];
        for (int i = 0; i < test.length() - 1; i++) {
            s[i] = Integer.toString(i + 1);
        }

        questionComboBox.setModel(new DefaultComboBoxModel(s));
    }

    private void loadQuestion(Question loadQ) {
        setComponentsEnabled(disableableComponents, false);
        deleteMenuItem.setEnabled(true);
        saveMenuItem.setEnabled(true);
        saveAsMenuItem.setEnabled(true);
        promptTextArea.setEnabled(true);
        answerTextArea.setEnabled(true);
        pointsPossTextField.setEnabled(true);
        //pointsEarnedTextField.setEnabled(true);

        if (test.length() <= 0) {
            questionComboBox.setEnabled(false);
        } else {
            questionComboBox.setEnabled(true);
        }

        if (test.length() <= 1) {
            prevQButton.setEnabled(false);
            nextQButton.setEnabled(false);
        } else {
            prevQButton.setEnabled(true);
            nextQButton.setEnabled(true);
        }

        promptTextArea.setText(loadQ.getPrompt());
        answerTextArea.setText(loadQ.getAnswer());

        if (loadQ.getClass().equals(MultipleChoice.class)) {

            questionTypeLabel.setText("Multiple Choice");

            setComponentsEnabled(mcComponents, true);
            listModel.clear();
            choicesList.setModel(listModel);
            // Populate choices combo box with choices
            for (String s : ((MultipleChoice) loadQ).getChoices()) {
                // insert s as item in combo box
                listModel.addElement(s);
            }

        } else if (loadQ.getClass().equals(ShortAnswer.class)) {

            questionTypeLabel.setText("Short Answer");

            setComponentsEnabled(saComponents, true);
            listModel.clear();
            choicesList.setModel(listModel);

        } else if (loadQ.getClass().equals(Programming.class)) {

            questionTypeLabel.setText("Programming");

            setComponentsEnabled(progComponents, true);

            listModel.clear();
            choicesList.setModel(listModel);
            fileTextField.setText(((Programming) question).getFile());
            if (((Programming) question).getLang() == Language.JAVA) {
                languageCombo.setSelectedIndex(0);
            } else if (((Programming) question).getLang() == Language.C) {
                languageCombo.setSelectedIndex(1);
            } else if (((Programming) question).getLang() == Language.CPP) {
                languageCombo.setSelectedIndex(2);
            } else {
                throw new RuntimeException("Bad stored language value");
            }

        } else {

            questionTypeLabel.setText("???");

            throw new RuntimeException("Illegal question type");
        }
    }

    private void newTest() {
        test = new Test(new Date(), new Time(0, 0, 0, true), new Time(1, 0, 0, true), false, false);

        resetQuestionComboBox();
        questionTypeLabel.setText("");
        promptTextArea.setText("");
        answerTextArea.setText("");
        pointsPossTextField.setText("5");
        addChoiceButton.setEnabled(false);
        deleteChoiceButton.setEnabled(false);
        pointsPossTextField.setEnabled(false);
        languageCombo.setEnabled(false);
        deleteMenuItem.setEnabled(false);
        fileLabel.setEnabled(false);
    }

    private void setComponentsEnabled(JComponent[] components, boolean cond) {
        for (JComponent jc : components) {
            jc.setEnabled(cond);
        }
    }

    private void openExam() {
        int result = fileChooser.showDialog(this, "Open");
        File f;

        if (result == javax.swing.JFileChooser.APPROVE_OPTION) {
            f = fileChooser.getSelectedFile();
            try {
                test = Test.open(f);
                testFile = f;

            } catch (IOException ex) {
                Logger.getLogger(InstructorTestify.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } else {
            return;
        }

        // refresh form
        //qList = (ArrayList) test.getQuestions();
        if ( test.length() <= 0) {
            newTest();
        } else {
            question = test.getQuestion(0);
            current = 1;
            loadQuestion(question);
        }
        //change question selection box

        reconstructComboBox();

    }

    private void error(String msg) {
        JOptionPane.showMessageDialog(null, msg, "Error", JOptionPane.ERROR_MESSAGE, null);
    }

    /**
     * Save the values in all fields to the current question.
     */
    private void saveQuestion() {
        // Do saving specific to question type     
        if(current < 0 && current < test.length())return;
        if (question.getClass().equals(MultipleChoice.class)) {
            // don't need to save the options-this is done by "Add Choice"
            // button
        } else if (question.getClass().equals(Programming.class)) {
            String filename = fileTextField.getText();
            if (filename == null || filename.equals("")) {
                error("You must enter a file name for this question.");

            } else {
                ((Programming) question).setFile(fileTextField.getText());
            }
            Language l = (Language) languageCombo.getSelectedItem();
            ((Programming) question).setLang(l);
        } else if (question.getClass().equals(ShortAnswer.class)) {
            // There is nothing specific to do
        } else {
            throw new RuntimeException("Bad question type on save");
        }

        // Do saving common to all question types
        String prompt, answer, ptsPossStr;
        prompt = promptTextArea.getText();
        answer = answerTextArea.getText();
        ptsPossStr = pointsPossTextField.getText();
        int ptsPoss = 0;

        if (prompt.equals("")) {
            error("You must enter a prompt.");

        } else {
            
            question.setPrompt(promptTextArea.getText());
        }

        if (ptsPossStr.equals("")) {
            error("You must enter an amount of points possible.");

        } else {
            question.setPtsPossible(Integer.parseInt(ptsPossStr));
        }


        try {
            ptsPoss = Integer.parseInt(ptsPossStr);
        } catch (NumberFormatException e) {
            error("Points possible must be a valid number.");
        }
        
        question.setPtsPossible(ptsPoss);
//        if (isNew) {
//            test.add(question);
//        }
    }

    private void initComponentLists() {
        disableableComponents = new JComponent[]{
            choicesLabel,
            choicesList,
            addChoiceButton,
            languageCombo,
            langLabel,
            fileLabel,
            fileTextField,
            deleteChoiceButton
        };

        mcComponents = new JComponent[]{
            choicesLabel,
            choicesList,
            addChoiceButton,
            pointsPossTextField,
            ptsPossLabel,
            deleteChoiceButton
        };

        saComponents = new JComponent[]{ /* empty */};

        progComponents = new JComponent[]{
            languageCombo,
            langLabel,
            fileLabel,
            fileTextField
        };
    }
}
