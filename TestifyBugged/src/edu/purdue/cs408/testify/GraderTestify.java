/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.purdue.cs408.testify;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;

/*
 * @author sims4
 */
public class GraderTestify extends javax.swing.JFrame {

    Test test, key;
    File testFile, keyFile;
    Question question;
    boolean isNew;
    int current;

    /**
     * Creates new form InstructorTestify. Also creates a new Test with one
     * blank question.
     */
    public GraderTestify() {
        listModel = new DefaultListModel<String>();
        initComponents();
        initComponentLists();
        test = new Test(new Date(), new Time(0, 0, 0, true), new Time(1, 0, 0, true), false, false);
        isNew = true;
        newWindow();
        resetQuestionComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        questionPanel = new javax.swing.JPanel();
        openFileChooser = new javax.swing.JFileChooser();
        promptLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        promptTextArea = new javax.swing.JTextArea();
        answerLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        keyAnswerTextArea = new javax.swing.JTextArea();
        choicesLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        choicesList = new javax.swing.JList(listModel);
        prevQButton = new javax.swing.JButton();
        nextQButton = new javax.swing.JButton();
        pointsEarnedTextField = new javax.swing.JTextField();
        pointsPossTextField = new javax.swing.JTextField();
        ptsEarnedLabel = new javax.swing.JLabel();
        ptsPossLabel = new javax.swing.JLabel();
        langLabel = new javax.swing.JLabel();
        questionComboBox = new javax.swing.JComboBox();
        typeMarker = new javax.swing.JLabel();
        questionTypeLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        answerTextArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        summaryButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        commentsTextArea = new javax.swing.JTextArea();
        commentsLabel = new javax.swing.JLabel();
        whichLangLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        testMenu = new javax.swing.JMenu();
        autogradeMenuItem = new javax.swing.JMenuItem();
        openKeyMenuItem = new javax.swing.JMenuItem();
        openStudentMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();

        javax.swing.GroupLayout questionPanelLayout = new javax.swing.GroupLayout(questionPanel);
        questionPanel.setLayout(questionPanelLayout);
        questionPanelLayout.setHorizontalGroup(
            questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 726, Short.MAX_VALUE)
        );
        questionPanelLayout.setVerticalGroup(
            questionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 418, Short.MAX_VALUE)
        );

        openFileChooser.setApproveButtonText("Open");
        openFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileChooserActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        promptLabel.setText("Prompt");

        promptTextArea.setEditable(false);
        promptTextArea.setColumns(20);
        promptTextArea.setRows(5);
        jScrollPane1.setViewportView(promptTextArea);

        answerLabel.setText("Key Answer");

        keyAnswerTextArea.setEditable(false);
        keyAnswerTextArea.setColumns(20);
        keyAnswerTextArea.setRows(5);
        jScrollPane2.setViewportView(keyAnswerTextArea);

        choicesLabel.setText("Choices");

        jScrollPane3.setViewportView(choicesList);

        prevQButton.setText("Previous");
        prevQButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                prevQButtonMouseClicked(evt);
            }
        });
        prevQButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevQButtonActionPerformed(evt);
            }
        });

        nextQButton.setText("Next");
        nextQButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nextQButtonMouseClicked(evt);
            }
        });
        nextQButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextQButtonActionPerformed(evt);
            }
        });

        pointsEarnedTextField.setText("0");

        pointsPossTextField.setEditable(false);
        pointsPossTextField.setText("5");
        pointsPossTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointsPossTextFieldActionPerformed(evt);
            }
        });

        ptsEarnedLabel.setText("Points Earned");

        ptsPossLabel.setText("Points Possible");

        langLabel.setText("Language");

        questionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1" }));
        questionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                questionComboBoxActionPerformed(evt);
            }
        });

        typeMarker.setText("Type:");

        questionTypeLabel.setText("jLabel8");

        answerTextArea.setEditable(false);
        answerTextArea.setColumns(20);
        answerTextArea.setRows(5);
        jScrollPane4.setViewportView(answerTextArea);

        jLabel1.setText("Student Answer");

        summaryButton.setText("Show Summary");
        summaryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                summaryButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Compiles?");

        commentsTextArea.setColumns(20);
        commentsTextArea.setRows(5);
        jScrollPane5.setViewportView(commentsTextArea);

        commentsLabel.setText("Comments ");

        whichLangLabel.setText("jLabel3");

        testMenu.setMnemonic('t');
        testMenu.setText("Test");

        autogradeMenuItem.setText("Auto-grade Multiple Choice");
        autogradeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autogradeMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(autogradeMenuItem);

        openKeyMenuItem.setText("Open Key");
        openKeyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openKeyMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(openKeyMenuItem);

        openStudentMenuItem.setMnemonic('o');
        openStudentMenuItem.setText("Open Student Exam");
        openStudentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openStudentMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(openStudentMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        testMenu.add(exitMenuItem);

        menuBar.add(testMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(questionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(typeMarker)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(questionTypeLabel)
                        .addContainerGap(546, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(commentsLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(prevQButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(summaryButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextQButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(promptLabel)
                                    .addComponent(answerLabel))
                                .addGap(87, 87, 87)
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4))
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane5)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(choicesLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(langLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ptsPossLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(ptsEarnedLabel)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(pointsEarnedTextField)
                                        .addComponent(pointsPossTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(whichLangLabel, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(questionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(typeMarker)
                    .addComponent(questionTypeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(promptLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(answerLabel))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(commentsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(choicesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pointsEarnedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ptsEarnedLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pointsPossTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ptsPossLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(langLabel)
                            .addComponent(whichLangLabel))))
                .addGap(13, 13, 13)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prevQButton)
                    .addComponent(nextQButton)
                    .addComponent(summaryButton))
                .addGap(49, 49, 49))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void nextQButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nextQButtonMouseClicked
    }//GEN-LAST:event_nextQButtonMouseClicked

    /**
     * Open a test from a file.
     */
    private void openStudentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openStudentMenuItemActionPerformed
        // TODO add your handling code here:
        // bring up file selection dialog

            Test openedTest = null;
            int result = openFileChooser.showDialog(this, "Open");

            if (result == javax.swing.JFileChooser.APPROVE_OPTION) {
                testFile = openFileChooser.getSelectedFile();
                try {
                    openedTest = Test.open(testFile);
                    if (openedTest.length() != key.length()) {
                        JOptionPane.showMessageDialog(null, "Error", "Key and student's exam are not of same length.", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    this.setTitle("Testify - " + testFile.getName());
                } catch (IOException ex) {
                    Logger.getLogger(GraderTestify.class.getName()).log(Level.SEVERE, null, ex);
                }
               
            }
            test = openedTest;

            if (test.length() != key.length()) {
                JOptionPane.showMessageDialog(null, "Error. Key and Student Exam have a different number of questions.");
            } // refresh form
            else if (test.getQuestion(0) != null) {
                loadQuestion(test.getQuestion(0));
                question = test.getQuestion(0);
            }

            //change question selection box
            reconstructComboBox();
    }//GEN-LAST:event_openStudentMenuItemActionPerformed

    private void prevQButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_prevQButtonMouseClicked
    }//GEN-LAST:event_prevQButtonMouseClicked

    private void prevQButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevQButtonActionPerformed
        // TODO add your handling code here:
        saveQuestion();
        if(!(test.length() == 0) && current < test.length()){
        
        isNew = false;
        current++;
        question = test.getQuestion(current - 1);
        questionComboBox.setSelectedIndex(current - 1);
        loadQuestion(question);
        }
    }//GEN-LAST:event_prevQButtonActionPerformed

    private void nextQButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextQButtonActionPerformed
        // TODO add your handling code here:
         saveQuestion();
        if(!(test.length() == 0) && current > 1){
        
        isNew = false;
        current--;
        question = test.getQuestion(current - 1);
        questionComboBox.setSelectedIndex(current - 1);
        loadQuestion(question);
        }
    }//GEN-LAST:event_nextQButtonActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        // TODO add your handling code here:
        // open file selection dialog
      saveQuestion();
        if (testFile == null) {
            saveMenuItemActionPerformed(evt);
        } else {
            try {
                test.save(testFile);
            } catch (IOException ex) {
                System.out.println("problem accessing file" + testFile.getAbsolutePath());
            }
        }
        
       
        // save test to specified file
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:
        // open file selection dialog if file doesnt exist
        // save test to specified file
         saveQuestion();
        int returnVal = openFileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            testFile = openFileChooser.getSelectedFile();
            try {
                // What to do with the file, e.g. display it in a TextArea
                //textarea.read(new FileReader(file.getAbsolutePath()), null);
                test.save(testFile);
            } catch (IOException ex) {
                System.out.println("problem accessing file" + testFile.getAbsolutePath());
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void openFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileChooserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_openFileChooserActionPerformed

    private void pointsPossTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointsPossTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pointsPossTextFieldActionPerformed

    private void questionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_questionComboBoxActionPerformed
        if (questionComboBox.getSelectedItem() != null && !((String) (questionComboBox.getSelectedItem())).equals("" + current)) {
            saveQuestion();
            isNew = false;
            int qNum = Integer.parseInt((String) questionComboBox.getSelectedItem());
            current = qNum;
            loadQuestion(test.getQuestion(current - 1));
        }
    }//GEN-LAST:event_questionComboBoxActionPerformed

    private void openKeyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openKeyMenuItemActionPerformed
        // bring up file selection dialog
        int result = openFileChooser.showDialog(this, "Open");
        File f;

        if (result == javax.swing.JFileChooser.APPROVE_OPTION) {
            f = openFileChooser.getSelectedFile();
            try {
                key = Test.open(f);
            } catch (IOException ex) {
                Logger.getLogger(GraderTestify.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }

        current = 1;
        // refresh form
        if (test.getQuestion(0) != null) {
            loadQuestion(test.getQuestion(0));
        }
        if (key.getQuestion(0) != null) {
            loadKeyAnswer();
            
        }

        //change question selection box
        reconstructComboBox();
    }//GEN-LAST:event_openKeyMenuItemActionPerformed

    private void autogradeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autogradeMenuItemActionPerformed

            for (int i = 0; i < test.length(); i++) {
                Question q = test.getQuestion(i);
                if (q.getClass().equals(MultipleChoice.class)) {
                    if (q.getAnswer().equals(key.getQuestion(i).getAnswer())) {
                        q.setPtsEarned(q.getPtsPossible());
                    } else {
                        q.setPtsEarned(0);
                    }
                }
            }
        loadQuestion(question);
    }//GEN-LAST:event_autogradeMenuItemActionPerformed

    private void summaryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_summaryButtonActionPerformed
        saveQuestion();
        SummaryDialog s = new SummaryDialog(this, true, test);
        s.setVisible(true);
    }//GEN-LAST:event_summaryButtonActionPerformed

    private void resetQuestionComboBox() {

        String[] qNums = new String[test.length()];
        for (int i = 0; i < test.length(); i++) {
            qNums[i] = "" + (i + 1);
        }

        if (test.length() == 0) {
            qNums = new String[1];
            questionComboBox.setModel(new javax.swing.DefaultComboBoxModel(qNums));
            questionComboBox.setEnabled(false);
        } else {
            questionComboBox.setModel(new javax.swing.DefaultComboBoxModel(qNums));
            questionComboBox.setEnabled(true);
            questionComboBox.setSelectedIndex(current - 1);
        }

    }

    private void newWindow() {
        current = -1;
        keyAnswerTextArea.setEnabled(false);
        resetQuestionComboBox();
        questionTypeLabel.setText("");
        promptTextArea.setText("");
        answerTextArea.setText("");
        pointsPossTextField.setText("");
        pointsEarnedTextField.setText("");
        nextQButton.setEnabled(false);
        prevQButton.setEnabled(false);
        promptTextArea.setEnabled(false);
        answerTextArea.setEnabled(false);
        pointsEarnedTextField.setEnabled(false);
        pointsPossTextField.setEnabled(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraderTestify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraderTestify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraderTestify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraderTestify.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraderTestify().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel answerLabel;
    private javax.swing.JTextArea answerTextArea;
    private javax.swing.JMenuItem autogradeMenuItem;
    private javax.swing.JLabel choicesLabel;
    private javax.swing.JList choicesList;
    private javax.swing.JLabel commentsLabel;
    private javax.swing.JTextArea commentsTextArea;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea keyAnswerTextArea;
    private javax.swing.JLabel langLabel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton nextQButton;
    private javax.swing.JFileChooser openFileChooser;
    private javax.swing.JMenuItem openKeyMenuItem;
    private javax.swing.JMenuItem openStudentMenuItem;
    private javax.swing.JTextField pointsEarnedTextField;
    private javax.swing.JTextField pointsPossTextField;
    private javax.swing.JButton prevQButton;
    private javax.swing.JLabel promptLabel;
    private javax.swing.JTextArea promptTextArea;
    private javax.swing.JLabel ptsEarnedLabel;
    private javax.swing.JLabel ptsPossLabel;
    private javax.swing.JComboBox questionComboBox;
    private javax.swing.JPanel questionPanel;
    private javax.swing.JLabel questionTypeLabel;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JButton summaryButton;
    private javax.swing.JMenu testMenu;
    private javax.swing.JLabel typeMarker;
    private javax.swing.JLabel whichLangLabel;
    // End of variables declaration//GEN-END:variables
    private javax.swing.DefaultListModel<String> listModel;
    JComponent[] disableableComponents;
    JComponent[] mcComponents;
    JComponent[] saComponents;
    JComponent[] progComponents;

    /**
     * Load a new question into the current question, populating all fields.
     * <ul>
     * <li>Disable irrelevant fields based on question type</li>
     * <li>Populates all question data fields</li>
     * <li>Populates language type combo box with the available programming
     * languages </li>
     * <li>Populates question combo box with list of questions from current
     * test</li>
     * </ul>
     */
    private void reconstructComboBox() {
        questionComboBox.removeAllItems();
        String s[] = new String[test.length()];
        for (int i = 0; i < test.length(); i++) {
            s[i] = Integer.toString(i + 1);
        }

        questionComboBox.setModel(new DefaultComboBoxModel(s));
    }

    private void loadKeyAnswer() {
        keyAnswerTextArea.setEnabled(true);
        if(current > 1)
        keyAnswerTextArea.setText(test.getQuestion(current - 1).getAnswer());
    }

    private void loadStudentAnswer() {
        answerTextArea.setEnabled(true);
        if(current > 1)
        answerTextArea.setText(key.getQuestion(current - 1).getAnswer());
    }

    private void loadQuestion(Question loadQ) {
        setComponentsEnabled(disableableComponents, false);
        clearComponents(disableableComponents);

        if (test.length() <= 0) {
            questionComboBox.setEnabled(false);
        } else {
            pointsEarnedTextField.setEnabled(true);
            pointsPossTextField.setEnabled(true);
            //ptsEarnedLabel.setEnabled(true);
            //ptsPossLabel.setEnabled(true);
            questionComboBox.setEnabled(true);
        }

        if (test.length() <= 1) {
            prevQButton.setEnabled(false);
            nextQButton.setEnabled(false);
        } else if (current == 1) {
            prevQButton.setEnabled(false);
            nextQButton.setEnabled(true);
        } else if (current == test.length()) {
            prevQButton.setEnabled(true);
            nextQButton.setEnabled(false);
        } else {
            prevQButton.setEnabled(true);
            nextQButton.setEnabled(true);
        }

        promptTextArea.setText(loadQ.getPrompt());
        keyAnswerTextArea.setText(loadQ.getAnswer());
        pointsEarnedTextField.setText(String.valueOf(loadQ.getPtsEarned()));
        pointsPossTextField.setText(String.valueOf(loadQ.getPtsPossible()));

        loadKeyAnswer();
        loadStudentAnswer();

        if (loadQ.getClass().equals(MultipleChoice.class)) {

            questionTypeLabel.setText("Multiple Choice");

            setComponentsEnabled(mcComponents, true);
            listModel.clear();
            choicesList.setModel(listModel);
            // Populate choices combo box with choices
            for (String s : ((MultipleChoice) loadQ).getChoices()) {
                // insert s as item in combo box
                listModel.addElement(s);
            }

        } else if (loadQ.getClass().equals(ShortAnswer.class)) {

            questionTypeLabel.setText("Short Answer");

            setComponentsEnabled(saComponents, true);
            // no special fields to deal with
        } else if (loadQ.getClass().equals(Programming.class)) {

            questionTypeLabel.setText("Programming");
            commentsTextArea.setText(((Programming)loadQ).getComments());
            whichLangLabel.setText("C");
            setComponentsEnabled(progComponents, true);

        } else {

            questionTypeLabel.setText("???");

            throw new RuntimeException("Illegal question type");
        }
        
        this.pointsPossTextField.setText(Integer.toString(key.getQuestion(current-1).getPtsPossible()));
    }

    private void setComponentsEnabled(JComponent[] components, boolean cond) {
        for (JComponent jc : components) {
            jc.setEnabled(cond);
        }
    }

    /**
     * Save the values in all fields to the current question.
     */
    private void saveQuestion() {

         if(current < 0 && current < test.length())return;
        // Specific operations for question types
        if (question.getClass().equals(MultipleChoice.class)) {
            // Nothing specific to do
        } else if (question.getClass().equals(Programming.class)) {
            ((Programming)question).setComments(commentsTextArea.getText());
        } else if (question.getClass().equals(ShortAnswer.class)) {
            // Nothing specific to do
        } else {
            throw new RuntimeException("Bad question type on save");
        }
        
        // General operations for all question types
        question.setPtsEarned(Integer.parseInt(pointsEarnedTextField.getText()));

        if (key != null) {
            key.getQuestion(current - 1).setAnswer(keyAnswerTextArea.getText());
        }
//        if (isNew) {
//            test.add(question);
//        }
    }

    private void initComponentLists() {
        disableableComponents = new JComponent[]{
            commentsTextArea,
            commentsLabel,
            choicesLabel,
            choicesList,
            langLabel,};

        mcComponents = new JComponent[]{
            choicesLabel,
            choicesList,
            pointsEarnedTextField,
            pointsPossTextField,
            ptsEarnedLabel,
            ptsPossLabel,};

        saComponents = new JComponent[]{ /* empty */};

        progComponents = new JComponent[]{
            commentsTextArea,
            commentsLabel,
            langLabel
        };
    }

    /** Clear the contents of components */
    private void clearComponents(JComponent[] components) {
        for (JComponent c : components) {
            
        }
    }
}
